# -*- coding: utf-8 -*-
"""Copia de Clase_05.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18PSxvdc04tmEo53eDC5lbdoW_yeao4JP

# Manipulacion de series y dataframes (Ejemplo en vivo)

<ol>
    <li> <strong>Python</strong>: No tiene una estructura "Serie", pero puedes usar listas o diccionarios como alternativas unidimensionales.
    <li><strong>Pandas</strong>: Usa Series, que son estructuras unidimensionales con √≠ndices personalizados, similares a los arreglos de NumPy pero m√°s flexibles.
    <li><strong>NumPy</strong>: Trabaja con arreglos (arrays), que son unidimensionales pero no tienen √≠ndices personalizados como las Series de Pandas.


<ol>
"""

# Series de ejemplo
import pandas as pd

Numeros = range(50,70,2)
print(Numeros)

print("-------Pandas puede convertir un rango en un df----------")


print("-------Pandas trabaja con series----------")

Numeros_Serie = pd.Series(Numeros)
print(Numeros_Serie)

print("-------Columna index generada por defecto por python----------")

Numero_Series_2a = pd.Series(Numeros)
print(Numero_Series_2a)

print("-------Columna index generada por mi----------")

Numeros_texto= ['primero','segundo','tercero','cuarto','quinto','sexto','septimo','octavo','noveno','decimo']
Numero_Series_2 = pd.Series(Numeros,index=Numeros_texto)
print(Numero_Series_2)

Numeros_3 = range(51,70,2)
print(Numeros_3)
print("El tipo de datos de Numeos_textos es:",type(Numeros_texto))


print("-------Otra cosa----------")

print("El tipo de datos de Numeros_3 es:",type(Numeros_3))


print("El tipo de datos de Numeros_3 es:",type(Numeros_Series_3))
Numeros_Series_3 = pd.Series(Numeros_3, index=Numeros_texto)
Numeros_Series_3

Numero_Series_2_porcion = Numero_Series_2[4:7]
Numero_Series_3_porcion = Numeros_Series_3[5:8]

print(Numero_Series_2_porcion + Numero_Series_3_porcion)

Numero_Series_2_porcion.add(Numero_Series_3_porcion,fill_value=0)

# Vamos a crear una estructura de serie
import pandas as pd

serie_otra= pd.Series(data=[1,2,3,4],index=['David','Juan',1,2],name='SerieX')
serie_otra

# Algunas propiedades de la serie
print('Indice de la serie:',serie.index)
print('Valores de la serie:',serie.values)
print('Longitud de serie:',serie.count())
# Verificar nulos en la serie
serie.isna()

"""**serie.loc** se utiliza para localizar una fila a partir de su indide literal"""

# Filtrar un indice
serie.loc['Juan']

"""**serie.iloc** se utiliza para seleccionar datos seg√∫n su posici√≥n num√©rica (0, 1, 2, ...) en lugar de sus etiquetas o nombres de √≠ndice."""

# Filtrar pero de otra forma
serie.iloc[0:42]

#Se utiliza para seleccionar datos seg√∫n su posici√≥n num√©rica (0, 1, 2, ...) en lugar de sus etiquetas o nombres de √≠ndice.

# Filtrar varios indices
serie.loc[['David',1]]

serie_otra
print("----------------")
print(serie_otra)

import numpy as np

serie_2 = pd.Series(data=[1,2,5,6,np.nan,20,np.nan])
serie_2

# Suma de nulos
serie_2.isnull().sum()

# Conteo de valores no tiene en cuenta los NaN
serie_2.value_counts()

# Creemos un dataframe
valores= [1000, 3500, 3000, 4000, 3000 , 2450]
nombres= ['David','Juan','Pedro','Lucas','Andrea','Felipe']
genero=['M','M','M','M','F','M']
df= pd.DataFrame(data={'salarios':valores, 'genero':genero},index=nombres)
df

# filtremos por genero
df_m = df[df['genero']=='M']
print(df_m.head())
print('------')
df_f=df[df['genero']=='F']
print(df_f.head())

# Otra forma
condicion_h = df['genero']=='M'
condicion_m = df['genero']=='F'
print(df[condicion_h])
print('-------------')
print(df[condicion_m])

# Algunas cosas adicionales
df.loc['David'][['salarios','genero']]

df.loc[['David','Juan']][['salarios','genero']]

"""# Lectura de csv / txt"""

from google.colab import drive
import os
drive.mount('/content/gdrive')

#%cd '/content/gdrive/MyDrive'
df= pd.read_csv('/content/winequality-red.csv',sep=',')
print(df[['density','pH','sulphates','alcohol','quality']].head())

#%cd '/content/gdrive/MyDrive'
df= pd.read_csv('/content/pokemon_data.txt',delimiter='\t')
print(df[['Name','Type 1','HP','Attack','Defense']].head())

"""# Lectura de xlsx"""

#%cd '/content/gdrive/MyDrive'
df= pd.read_excel('/content/defaultoutput.xlsx')
print(df[['index','ID','Year_Birth','Education','Income']].head())

"""# Lectura desde Github /Apis"""

import pandas as pd

url = 'https://raw.githubusercontent.com/JJTorresDS/stocks-ds-edu/main/stocks.csv'
df = pd.read_csv(url, index_col=0)
print(df[['AMZN','MCD','SBUX','GOOG','MSFT']].head().round(1))

df.info()

!wget -O cars_clus.csv https://s3-api.us-geo.objectstorage.softlayer.net/cf-courses-data/CognitiveClass/ML0101ENv3/labs/cars_clus.csv

filename = 'cars_clus.csv'
#Lectura
pdf = pd.read_csv(filename)
print ("Shape: ", pdf.shape)

print("1--------------------")

filename

print("2--------------------")

print(pdf[['manufact','model','sales','resale']].head(5))

"""# Lectura de informacion

Los datos se encuentran en la siguiente link:
[Data Acciones](https://raw.githubusercontent.com/JJTorresDS/stocks-ds-edu/main/stocks.csv)


"""

import pandas as pd

url = 'https://raw.githubusercontent.com/JJTorresDS/stocks-ds-edu/main/stocks.csv'
df = pd.read_csv(url, index_col=0)
print(df.head(5))

print(df.columns)
print("--------------------")

df.head()

"""Miremos el tama√±o de nuestro datraframe"""

df.shape

"""71 filas x 14 columnas

Las columnas son los precios de acciones de:

1. MCD: Macdonals
2. SBUX: Starbucks
3. GOOG: Google
4. AMZN: Amazon
5. MSFT: Microsoft
6. JPM: JPMorgan Chase & Co.
7. BAC: Bank of America Corp
8. C: Citigroup
9. MAR: Pharma MAr
10. HLT: Hoteles Hilton
11. RCL: Royal Caribbean Cruises
12. V: Visa Inc.
13. MA: Mastercard
14. PYPL: Paypal

# Analizando el comportamiento de una serie de tiempo
"""

df['MA'].plot(kind='line',figsize=(10,6),xlabel='Fecha', ylabel='Precio Accion', title='Precio Accion vs Fecha')

#('line', 'bar', 'barh', 'kde', 'density', 'area', 'hist', 'box', 'pie', 'scatter', 'hexbin')

"""Se observa un comportamiento creciente entre el 01/01/21 hasta el 11/01/2021

# Grafiquemos todas las series de tiempo
"""

df.plot(kind='line',figsize=(15,6),xlabel='Fecha', ylabel='Precio Accion', title='Precio Accion vs Fecha').legend(loc='best')

"""**En cual accion invertirian y porque?**

Al parecer hay una gran diferencia en el comportamiento de las acciones **GOOG (Google) y AMZN (Amazon)** respecto a las dem√°s, por otro lado podemos analizar el porcentaje de cambio cada d√≠a para entender como estan sucediendo los cambios diarios de manera porcentual
"""

df_cambios=df.pct_change()*100
df_cambios

df_cambios.plot(kind='line',figsize=(15,6),xlabel='Fecha', ylabel='Porcentaje de cambio', title='Precio Accion vs Fecha').legend(loc='best')

"""**Siguen pensando lo mismo respecto a la pregunta anterior**
Teniendo en cuenta esta informaci√≥n cual ser√≠a a la acci√≥n en la cual invertirian?

La respuesta en que accion invertir no solo pasa por el valor de la acci√≥n en si sino mas bien por factores asociados a la volatididad que pueda tener la acci√≥n.

Cuando se prefiere aversion al riesgo (evitar incertidumbre en inversiones) se requieren acciones que tengan poca volatilidad. üß± üà∂ ‚òÅ ü™ó ‚ùé

Por el contrario cuando se asumen riesgos las inversiones podr√≠an enfocarse en aquellas acciones con mayor volatilidad ‚è∞ ‚öó ‚õπ ‚ôü

# Grafico interactivo

Para generar un grafico dinamico podemos usar plotly con el fin de poder establecer el valor en cada momento del tiempo para cada accion

Ademas debemos hacer uso de la funcion ```melt``` que explicaremos posteriormente mas adelante pero consiste en formato long del dataframe para facilitar el grafico en plotly
"""

df_n=df.copy()
df_n['Fecha']=df.index
df_n= df_n.reset_index(drop=True)
df_n.round(1)

df_long=pd.melt(df_n , value_vars=df.columns,id_vars='Fecha')
df_long

import plotly.express as px


fig=px.line(data_frame=df_long,x='Fecha',y='value',line_group='variable',color='variable',title='Comportamiento de precio de acciones',\
             labels={
                     "Fecha": "Fecha_dias",
                     "value": "Precio (USD)"
                 })
fig.update_layout(paper_bgcolor="#FFFFFF",plot_bgcolor='#FFFFFF',)

fig.show()

"""# Excluyendo Amazon y GOOGLE"""

df_n=df.copy()
df_n['Fecha']=df.index
df_n= df_n.reset_index(drop=True)
df_n= df_n.drop(columns=['GOOG','AMZN'])
df_n

columnas=list(df.columns)
unwanted_num = {'AMZN', 'GOOG'}

col_final = [x for x in columnas if x not in unwanted_num]
col_final

df_long = pd.melt(df_n , value_vars=col_final,id_vars='Fecha')
df_long

import plotly.express as px


fig=px.line(data_frame=df_long,x='Fecha',y='value',line_group='variable',color='variable',title='Comportamiento de precio de acciones',\
             labels={
                     "Fecha": "Fecha_dias",
                     "value": "Precio (USD)"
                 })
fig.update_layout(paper_bgcolor="#FFFFFF",plot_bgcolor='#FFFFFF',)

fig.show()

"""Ahora se pueden ver mucho mejor las fluctuaciones de cada compa√±ia que antes no era tan claro"""